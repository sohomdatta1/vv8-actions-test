diff --git a/src/interpreter/bytecode-generator.cc b/src/interpreter/bytecode-generator.cc
index 45f0d1e..612c86f 100644
--- a/src/interpreter/bytecode-generator.cc
+++ b/src/interpreter/bytecode-generator.cc
@@ -1033,6 +1033,19 @@ void BytecodeGenerator::GenerateBytecodeBody() {
   // Emit tracing call if requested to do so.
   if (FLAG_trace) builder()->CallRuntime(Runtime::kTraceEnter);
 
+  // VisibleV8: use trace points to invalidate internal stack tracking
+  //------------------------------------------------------------------
+  {
+    // Preserve accumulator (pass as only argument, which will be returned)
+    RegisterAllocationScope register_scope(this);
+    Register result = register_allocator()->NewRegister();
+    builder()->
+      StoreAccumulatorInRegister(result).
+      CallRuntime(Runtime::kTraceInvalidateStack, result);
+  }
+  //------------------------------------------------------------------
+
+
   // Emit type profile call.
   if (info()->collect_type_profile()) {
     feedback_spec()->AddTypeProfileSlot();
@@ -2445,6 +2458,18 @@ void BytecodeGenerator::BuildVariableLoadForAccumulatorValue(
 }
 
 void BytecodeGenerator::BuildReturn(int source_position) {
+  // VisibleV8: use trace points to invalidate internal stack tracking
+  //------------------------------------------------------------------
+  {
+    // Preserve accumulator (pass as only argument, which will be returned)
+    RegisterAllocationScope register_scope(this);
+    Register result = register_allocator()->NewRegister();
+    builder()->
+      StoreAccumulatorInRegister(result).
+      CallRuntime(Runtime::kTraceInvalidateStack, result);
+  }
+  //------------------------------------------------------------------
+
   if (FLAG_trace) {
     RegisterAllocationScope register_scope(this);
     Register result = register_allocator()->NewRegister();
@@ -2724,6 +2749,30 @@ void BytecodeGenerator::VisitAssignment(Assignment* expr) {
     VisitForAccumulatorValue(expr->value());
   }
 
+  // VisibleV8 (trace assignments to named/keyed properties only)
+  if ((assign_type == NAMED_PROPERTY) || (assign_type == KEYED_PROPERTY)) {
+    // Save accumulator for later restoration
+    Register saved_acc = register_allocator()->NewRegister();
+    builder()->StoreAccumulatorInRegister(saved_acc);
+
+    // Trace object/property/new-value for this assignment
+    RegisterList trace_args = register_allocator()->NewRegisterList(4);
+    builder()->
+      LoadLiteral(Smi::FromInt(expr->position())).
+      StoreAccumulatorInRegister(trace_args[0]).
+      MoveRegister(object, trace_args[1]).
+      MoveRegister(saved_acc, trace_args[3]);
+    if (assign_type == NAMED_PROPERTY) {
+      builder()->LoadLiteral(name).StoreAccumulatorInRegister(trace_args[2]);
+    } else {
+      builder()->MoveRegister(key, trace_args[2]);
+    }
+    builder()->CallRuntime(Runtime::kTracePropertyStore, trace_args); //args: (call-site, this, key, value)
+
+    // Restore accumulator
+    builder()->LoadAccumulatorWithRegister(saved_acc);
+  }
+
   // Store the value.
   builder()->SetExpressionPosition(expr);
   switch (assign_type) {
@@ -3276,6 +3325,18 @@ void BytecodeGenerator::VisitPropertyLoad(Register obj, Property* property) {
     case VARIABLE:
       UNREACHABLE();
     case NAMED_PROPERTY: {
+      // VisibleV8: generate code to trace named property loads
+      {
+        RegisterList trace_args = register_allocator()->NewRegisterList(3);
+        builder()->
+          LoadLiteral(Smi::FromInt(property->position())).
+          StoreAccumulatorInRegister(trace_args[0]).
+          MoveRegister(obj, trace_args[1]).
+          LoadLiteral(property->key()->AsLiteral()->AsRawPropertyName()).
+          StoreAccumulatorInRegister(trace_args[2]).
+          CallRuntime(Runtime::kTracePropertyLoad, trace_args); //args: (call-site, this, key)
+      }
+
       builder()->SetExpressionPosition(property);
       builder()->LoadNamedProperty(
           obj, property->key()->AsLiteral()->AsRawPropertyName(),
@@ -3283,7 +3344,23 @@ void BytecodeGenerator::VisitPropertyLoad(Register obj, Property* property) {
       break;
     }
     case KEYED_PROPERTY: {
-      VisitForAccumulatorValue(property->key());
+      // RESHUFFLED for VisV8--evaluate property key value into a register, not the accumulator:
+      Register key_reg = VisitForRegisterValue(property->key());
+
+      // VisibleV8: generate code to trace keyed property loads
+      {
+        RegisterList trace_args = register_allocator()->NewRegisterList(3);
+        builder()->
+          LoadLiteral(Smi::FromInt(property->position())).
+          StoreAccumulatorInRegister(trace_args[0]).
+          MoveRegister(obj, trace_args[1]).
+          MoveRegister(key_reg, trace_args[2]).
+          CallRuntime(Runtime::kTracePropertyLoad, trace_args); //args: (call-site, this, key)
+      }
+
+      // RESHUFFLED for VisV8--move the stashed key value into the accumulator
+      builder()->LoadAccumulatorWithRegister(key_reg);
+
       builder()->SetExpressionPosition(property);
       builder()->LoadKeyedProperty(
           obj, feedback_index(feedback_spec()->AddKeyedLoadICSlot()));
@@ -3498,6 +3575,25 @@ void BytecodeGenerator::VisitCall(Call* expr) {
         .StoreAccumulatorInRegister(callee);
   }
 
+  // VisibleV8: trace generic function calls
+  {
+    RegisterList trace_args = register_allocator()->NewGrowableRegisterList();
+    builder()->
+      LoadLiteral(Smi::FromInt(expr->position())).
+      StoreAccumulatorInRegister(register_allocator()->GrowRegisterList(&trace_args)).
+      MoveRegister(callee, register_allocator()->GrowRegisterList(&trace_args));
+
+    if (implicit_undefined_receiver) {
+      BuildPushUndefinedIntoRegisterList(&trace_args);
+    }
+
+    for (int i = 0; i < args.register_count(); ++i) {
+      builder()->MoveRegister(args[i], register_allocator()->GrowRegisterList(&trace_args));
+    }
+
+    builder()->CallRuntime(Runtime::kTraceCallSite, trace_args); // args: (call-site, func, this, args...)
+  }
+
   builder()->SetExpressionPosition(expr);
 
   int feedback_slot_index = feedback_index(feedback_spec()->AddCallICSlot());
@@ -3576,6 +3672,21 @@ void BytecodeGenerator::VisitCallNew(CallNew* expr) {
   RegisterList args = register_allocator()->NewGrowableRegisterList();
   VisitArguments(expr->arguments(), &args);
 
+  // VisibleV8 code: trace new Constructor(...) calls
+  {
+    RegisterList trace_args = register_allocator()->NewGrowableRegisterList();
+    builder()->
+      LoadLiteral(Smi::FromInt(expr->position())).
+      StoreAccumulatorInRegister(register_allocator()->GrowRegisterList(&trace_args)).
+      MoveRegister(constructor, register_allocator()->GrowRegisterList(&trace_args));
+
+    for (int i = 0; i < args.register_count(); ++i) {
+      builder()->MoveRegister(args[i], register_allocator()->GrowRegisterList(&trace_args));
+    }
+
+    builder()->CallRuntime(Runtime::kTraceCallNewSite, trace_args);
+  }
+
   // The accumulator holds new target which is the same as the
   // constructor for CallNew.
   builder()->SetExpressionPosition(expr);
diff --git a/src/runtime/runtime-test.cc b/src/runtime/runtime-test.cc
index b3cdf3f..b4d4cd0 100644
--- a/src/runtime/runtime-test.cc
+++ b/src/runtime/runtime-test.cc
@@ -4,7 +4,12 @@
 
 #include "src/runtime/runtime-utils.h"
 
-#include <memory>
+#include <vector>
+#include <algorithm>
+#include <pthread.h>
+#include <fstream>
+#include <unistd.h>
+#include <sys/syscall.h>  // Horrible VisV8 hack--forgive me...
 
 #include "src/api.h"
 #include "src/arguments.h"
@@ -841,6 +846,495 @@ RUNTIME_FUNCTION(Runtime_TraceExit) {
   return obj;  // return TOS
 }
 
+// BEGIN VisibleV8
+//------------------------------
+// Fastpath replacement for "PrintUC16" that doesn't rely on snprintf
+static void myPrintUC16(String* str, std::ostream& out, int start = 0, int end = -1) {
+  static char digits[] = "0123456789abcdef";
+  char buff[4096];
+  char* bp = buff;
+  char* bmax = buff + sizeof(buff) - 6;  // max length char escape is 6 chars
+
+  if (end < 0) end = str->length();
+  StringCharacterStream src(str, start);
+  for (int i = start; i < end && src.HasMore(); ++i) {
+    auto c = src.GetNext();
+    if (c < ' ') {
+      // Unprintable ASCII ("\xEscaped")
+      *bp++ = '\\';
+      *bp++ = 'x';
+      *bp++ = digits[(c & 0xf0) >> 4];
+      *bp++ = digits[(c & 0x0f)];
+    } else if (c <= '~') {
+      // Printable ASCII
+      if (c == ':' || c == '\\') {  // handle escapes for our output delimiter
+        *bp++ = '\\';
+      }
+      *bp++ = (char)c;
+    } else {
+      // UC16 (\UEscaped)
+      *bp++ = '\\';
+      *bp++ = 'u';
+      *bp++ = digits[(c & 0xf000) >> 12];
+      *bp++ = digits[(c & 0x0f00) >> 8];
+      *bp++ = digits[(c & 0x00f0) >> 4];
+      *bp++ = digits[(c & 0x000f)];
+    }
+
+    // Capacity flush
+    if (bp >= bmax) {
+      out.write(buff, bp - buff);
+      bp = buff;
+    }
+  }
+
+  // Remainder flush
+  if (bp > buff) {
+    out.write(buff, bp - buff);
+  }
+}
+
+
+// Fastpath stringify for something simple (Smi, String, ...)
+// (extracted from various 8-cylinder printing functions around V8, all too general/too slow)
+void visv8_to_string(Isolate* isolate, std::ostream& out, Object* obj, bool quotes=true, int max_len=-1) {
+  HandleScope scope(isolate);
+
+  if (obj->IsSmi()) {
+    // Fine, print the stupid integer...
+    out << Smi::cast(obj)->value();
+  } else {
+    // Determine type of HeapObject...
+    if (obj->IsString()) {
+      if (quotes) { out << '"'; }
+      myPrintUC16(String::cast(obj), out, 0, max_len);
+      if (quotes) { out << '"'; }
+    } else if (obj->IsNumber()) {
+      out << obj->Number();
+    } else if (obj->IsOddball()) {
+      switch (Oddball::cast(obj)->kind()) {
+        case Oddball::kFalse:
+          out << "#F";
+          break;
+        case Oddball::kTrue:
+          out << "#T";
+          break;
+        case Oddball::kNull:
+          out << "#N";
+          break;
+        case Oddball::kUndefined:
+          out << "#U";
+          break;
+        default:
+          out << "#?";
+      }
+    } else if (obj->IsJSFunction()) {
+      auto info = JSFunction::cast(obj)->shared();
+      if (!info->IsUserJavaScript()) {
+        out << '%';
+      }
+
+      auto name = info->name();
+      if (name->length()) {
+        myPrintUC16(name, out, 0, max_len);
+      } else {
+        out << "<anonymous>";
+      }
+    } else if (obj->IsJSRegExp()) {
+      out << '/';
+      myPrintUC16(JSRegExp::cast(obj)->Pattern(), out, 0, max_len);
+      out << '/';
+    } else if (obj->IsJSReceiver()) {
+      Handle<JSReceiver> rcvr = handle(JSReceiver::cast(obj));
+      Handle<String> ctor = JSReceiver::GetConstructorName(rcvr);
+      out << '{';
+      myPrintUC16(*ctor, out, 0, max_len);
+      out << '}';
+    } else {
+      out << '?';
+    }
+  }
+}
+
+// TLS storage slot key for per-thread output streams for our trace logging
+static pthread_key_t visv8_out_key;
+
+// Type used to aggregate all TLS data into one POD object
+struct VisV8TlsData {
+  // std filestream used to log records to disk for this thread
+  std::ofstream* log;
+
+  // Small/simple "set" of seen Isolate/SID pairs (to avoid re-dumping script source/etc. within one log)
+  std::vector< std::pair<Isolate*, int> > seen_sids;
+
+  // Context (last-encountered Isolate, and last SID within that Isolate)
+  Isolate* last_isolate;
+  int last_script_id;
+
+  // Dumb constructor
+  VisV8TlsData(std::ofstream* log_) :
+    log(log_),
+    last_isolate(nullptr),
+    last_script_id(-1) {}
+
+  // Destructor: close and delete file stream object, reset all key fields to null/invalid state
+  ~VisV8TlsData() {
+    log->close();
+    delete log;
+    log = nullptr;
+    last_isolate = nullptr;
+    last_script_id = -1;
+  }
+
+  // Predicate: have we logged a given isolate/SID pair yet?
+  bool check_sid(Isolate *isolate, int sid) {
+    return std::binary_search(std::begin(seen_sids), std::end(seen_sids), std::make_pair(isolate, sid));
+  }
+
+  // Utility: insert an isolate/SID pair into our primitive set (no checks for duplicates)
+  void add_sid(Isolate *isolate, int sid) {
+    auto val = std::make_pair(isolate, sid);
+    seen_sids.insert(std::upper_bound(std::begin(seen_sids), std::end(seen_sids), val), val);
+  }
+
+  // Utility: log a '$' record for the given script object
+  void log_script(Isolate *isolate, Script *script) {
+    add_sid(isolate, script->id());
+    std::ofstream &out = *log;
+
+    // Check for eval nesting (i.e., a parent script that may need to be dumped first)
+    if (script->eval_from_shared()->IsSharedFunctionInfo()) {
+      auto sfi = SharedFunctionInfo::cast(script->eval_from_shared());
+      if (sfi->script()->IsScript()) {
+        auto parent = Script::cast(sfi->script());
+
+        // Yes, dump that parent... (if needed)
+        if (!check_sid(isolate, parent->id())) {
+          log_script(isolate, parent);
+        }
+
+        out << '$' << (void *)isolate << ':' << script->id() << ':' << parent->id();
+      } else {
+        // Well, we were eval'd, but we couldn't identify the parent script??
+        out << '$' << (void *)isolate << ':' << script->id() << ":#?";
+      }
+    } else {
+      // No parent, so print the script name
+      out << '$' << (void *)isolate << ':' << script->id() << ':';
+      visv8_to_string(isolate, out, script->name());
+    }
+
+    // Always finish with the source code (unquoted)
+    out << ':';
+    visv8_to_string(isolate, out, script->source(), false);
+    out << '\n';
+  }
+
+  // Utility: log the current ".origin" property of the current global object (if any)
+  void log_origin(Isolate *isolate) {
+    std::ostream& out = *log;
+
+    // HACK: must check status of EmbedderField[1] ourselves, since
+    //       WebKit will trigger VisibleV8 logging (i.e., this function)
+    //       before the global Window object is fully initialized...
+    auto native_global = handle(isolate->native_context()->global_object());
+    if (native_global->GetEmbedderFieldCount() >= 2) {
+      if (native_global->GetEmbedderField(1)->IsSmi()) {
+        auto origin = JSReceiver::GetProperty(isolate, native_global, "origin");
+        Handle<Object> origin_value;
+        if (origin.ToHandle(&origin_value)) {
+          out << '@';
+          visv8_to_string(isolate, out, *origin_value);
+          out << '\n';
+          return; // Early out
+        }
+      }
+    }
+    // If for some reason (e.g., not running inside WebKit/Blink) we have no origin,
+    // display that graciously
+    out << "@?\n";
+  }
+};
+
+// Thread-exit destructor (to close any per-thread logging file opened, etc.)
+static void visv8_thread_exit_flusher(void* arg) {
+  auto data = static_cast<VisV8TlsData*>(arg);  //pthread guarantees this is not NULL
+  delete data;
+  pthread_setspecific(visv8_out_key, nullptr);
+}
+
+// Initialization routine for VisV8's TLS slot (must call-once per process, before any visv8 callbacks)
+void visv8_tls_init() {
+  // HACK: only direct pthread calls give us thread destructors [V8's xplatform thread stuff won't]
+  if (pthread_key_create(&visv8_out_key, visv8_thread_exit_flusher)) {
+    perror("pthread_key_create");
+  }
+}
+
+// Self-contained "clean up the current thread's TLS stuff" function for use by external shutdown logic (e.g., atexit)
+void visv8_tls_fini() {
+  auto data = pthread_getspecific(visv8_out_key);
+  if (data) {
+    visv8_thread_exit_flusher(data);
+  }
+}
+
+// RAII "handle" to VV8 per-thread context; keep strictly lexically scoped!
+class VisV8Context {
+  VisV8TlsData *data;
+public:
+  // There is exactly ONE way to properly construct one of these...
+  VisV8Context() = delete;
+  VisV8Context(const VisV8Context&) = delete;
+
+  // ...and THIS is it
+  explicit VisV8Context(Isolate *current_isolate) {
+    // Get the TLS data for this thread
+    data = static_cast<VisV8TlsData*>(pthread_getspecific(visv8_out_key));
+
+    // If it doesn't exist yet, initialize it
+    if (!data) {
+      // HACK: only direct pthread call can recover thread "name" [can't get current Thread object from V8?]
+      char thread_name[16] = "<unknown>";
+      if (pthread_getname_np(pthread_self(), thread_name, sizeof(thread_name))) {
+        perror("pthread_getname_np"); 
+      }
+
+      // First time logging in this thread--must open a new, per-thread logfile
+      char log_name[256];
+      snprintf(log_name, sizeof(log_name), "vv8-%ld-%d-%s.log",
+          (long)base::OS::TimeCurrentMillis(),
+          base::OS::GetCurrentThreadId(),
+          thread_name);
+
+      auto log = new std::ofstream(log_name);
+      DCHECK_NE(log, nullptr);
+      if (!*log) {
+        perror(log_name);
+        abort();
+      }
+
+      data = new VisV8TlsData(log);
+      DCHECK_NE(data, nullptr);
+
+      if (pthread_setspecific(visv8_out_key, data)) {
+        perror("pthread_setspecific");
+      } else {
+        // Another hack: since pthreads doesn't call thread destructors on the "main thread" (since it doesn't call pthread_exit),
+        // and since calling pthread_exit inside an atexit() handler is NO BUENO (it can and will disrupt clean process shutdown),
+        // we need to set up a special ad hoc thread destructor for the "main thread" using atexit
+        // EXTRA HACKY: there is no portable pthreads API for determining "main thread" status; use this Linux-only hack for now...
+        if (syscall(SYS_gettid) == getpid()) {
+          atexit(visv8_tls_fini);
+        }
+      }
+    }
+
+    // Check for Isolate/scriptID invalidation based on current isolate
+    if (current_isolate != data->last_isolate) {
+      data->last_isolate = current_isolate;
+      data->last_script_id = -1;  // since SIDs are strictly per-isolate
+    }
+  }
+
+  // Invalidate our "last SID" (e.g., when entering/exiting new function)
+  void invalidate_sid_stack() {
+    data->last_script_id = -1;
+  }
+
+  friend class VisV8Logger;
+};
+
+// RAID "handle" to VisV8 context's logging stream (lexically-scoped, short-lived)
+// (right now, trivially simple; if we later add in more complicated [synchronized] log flushing,
+// this will hide all of that nicely)
+class VisV8Logger {
+  VisV8TlsData *data;
+public:
+  VisV8Logger() = delete;
+  VisV8Logger(const VisV8Logger&) = delete;
+
+  // Shortcut to handle creating a VisV8Context for us (if we don't need that separately)
+  explicit VisV8Logger(Isolate *current_isolate) : VisV8Logger(VisV8Context(current_isolate)) {}
+
+  explicit VisV8Logger(const VisV8Context& context) : data(context.data) {
+    auto current_isolate = data->last_isolate;  // Assume no change in isolate from the creation of our context handle (lexical lifetimes)
+
+    // Since we are creating a logger, they must want to log.  So lets establish log context...
+    StackTraceFrameIterator it(current_isolate);
+    if (!it.done()) {
+      auto script_id = it.frame()->script()->id();
+
+      // Is it new?
+      if (script_id != data->last_script_id) {
+        // Yes--update and relog
+        data->last_script_id = script_id;
+
+        // Re-log our global ".origin" object (if any)
+        data->log_origin(current_isolate);
+
+        // First stack walk: find any un-logged scripts that need a '$' record
+        for (; !it.done(); it.Advance()) {
+          auto script = it.frame()->script();
+          if (!data->check_sid(current_isolate, script->id())) {
+            // Not seen yet--log that puppy
+            data->log_script(current_isolate, script);
+          }
+        }
+
+        // Second stack walk: print out the active (valid, JavaScript) script IDs from top to bottom
+        out() << '!' << (void*)current_isolate;
+        for (StackTraceFrameIterator it2(current_isolate); !it2.done(); it2.Advance()) {
+          out() << ':' << it2.frame()->script()->id();
+        }
+        out() << '\n';
+      } // else, do nothing (we're in the same old context)
+    } else {
+      // Weird--we can't tell!
+      out() << "!?\n";
+    }
+  }
+
+  ~VisV8Logger() {
+    out() << std::endl;
+
+    // Trap I/O errors as fatal
+    if (!out()) {
+      perror("log output");
+      abort();
+    }
+  }
+
+  // Public access to the logging stream
+  std::ostream& out() const { return *data->log; }
+};
+
+// Predicate to see if a function (for call or construct) is worth logging
+static bool visv8_should_log_function(Object* obj) {
+  if (obj->IsSmi() || !HeapObject::cast(obj)->IsJSFunction()) {
+    // Some kind of mixup--default to logging in the face of the unknown
+    return true;
+  }
+
+  auto info = JSFunction::cast(obj)->shared();
+  if (!info) {
+    // More uncertainty!
+    return true;
+  }
+
+  // Log only functions that are NOT user-defined
+  return !info->IsUserJavaScript();
+}
+
+// Predicate to see if an object (for property load/store) is worth logging
+static bool visv8_should_log_object(Object* obj) {
+  if (obj->IsPrimitive()) {
+    // Never log accesses on primitive values
+    return false;
+  }
+
+  if (!HeapObject::cast(obj)->IsJSObject()) {
+    // When in doubt about object type, log
+    return true;
+  }
+
+  // Log only objects originating from API functions/ctors
+  return JSObject::cast(obj)->WasConstructedFromApiFunction();
+}
+
+RUNTIME_FUNCTION(Runtime_TracePropertyLoad) {
+  HandleScope hs(isolate);
+  CONVERT_ARG_CHECKED(Smi, call_site, 0);
+  CONVERT_ARG_CHECKED(Object, obj, 1);
+  CONVERT_ARG_CHECKED(Object, prop, 2);
+
+  if (visv8_should_log_object(obj)) {
+    VisV8Logger vlog(isolate);
+   
+    vlog.out() << 'g' << Smi::ToInt(call_site) << ':';
+    visv8_to_string(isolate, vlog.out(), obj);
+    vlog.out() << ':';
+    visv8_to_string(isolate, vlog.out(), prop);
+  }
+
+  return isolate->heap()->undefined_value();
+}
+
+RUNTIME_FUNCTION(Runtime_TracePropertyStore) {
+  HandleScope hs(isolate);
+  CONVERT_ARG_CHECKED(Smi, call_site, 0);
+  CONVERT_ARG_CHECKED(Object, obj, 1);
+  CONVERT_ARG_CHECKED(Object, prop, 2);
+  CONVERT_ARG_CHECKED(Object, value, 3);
+ 
+  if (visv8_should_log_object(obj)) {
+    VisV8Logger vlog(isolate);
+  
+    vlog.out() << 's' << Smi::ToInt(call_site) << ':';
+    visv8_to_string(isolate, vlog.out(), obj);
+    vlog.out() << ':';
+    visv8_to_string(isolate, vlog.out(), prop);
+    vlog.out() << ':';
+    visv8_to_string(isolate, vlog.out(), value);
+  }
+
+  return isolate->heap()->undefined_value();
+}
+
+RUNTIME_FUNCTION(Runtime_TraceCallSite) {
+  HandleScope scope(isolate);
+  CONVERT_ARG_CHECKED(Smi, call_site, 0);
+  CONVERT_ARG_CHECKED(Object, func, 1);
+  
+  // Note the additional check--if the receiver (i.e., `this` value) is a String, do not log
+  // (this gets rid of tons of spammy string operations, and should not hide any important behavior)
+  if (visv8_should_log_function(func)
+      && !((args.length() > 2) && (args[2]->IsString())))
+  {
+    VisV8Logger vlog(isolate);
+
+    vlog.out() << 'c' << Smi::ToInt(call_site) << ':';
+    visv8_to_string(isolate, vlog.out(), func);
+    for (int i = 2; i < args.length(); ++i) {
+      vlog.out() << ':';
+      visv8_to_string(isolate, vlog.out(), args[i]);
+    }
+  }
+
+  return isolate->heap()->undefined_value();
+}
+
+RUNTIME_FUNCTION(Runtime_TraceCallNewSite) {
+  HandleScope scope(isolate);
+  CONVERT_ARG_CHECKED(Smi, call_site, 0);
+  CONVERT_ARG_CHECKED(Object, func, 1);
+  
+  if (visv8_should_log_function(func)) {
+    VisV8Logger vlog(isolate);
+
+    vlog.out() << 'n' << Smi::ToInt(call_site) << ':';
+    visv8_to_string(isolate, vlog.out(), func);
+    for (int i = 2; i < args.length(); ++i) {
+      vlog.out() << ':';
+      visv8_to_string(isolate, vlog.out(), args[i]);
+    }
+  }
+
+  return isolate->heap()->undefined_value();
+}
+
+RUNTIME_FUNCTION(Runtime_TraceInvalidateStack) {
+  SealHandleScope shs(isolate);
+  DCHECK_EQ(1, args.length());
+  CONVERT_ARG_CHECKED(Object, val, 0);
+  VisV8Context ctx(isolate);
+  ctx.invalidate_sid_stack();
+  return val;
+}
+
+//------------------------------
+// END VisibleV8
+
 RUNTIME_FUNCTION(Runtime_GetExceptionDetails) {
   HandleScope shs(isolate);
   DCHECK_EQ(1, args.length());
diff --git a/src/runtime/runtime.h b/src/runtime/runtime.h
index da16ee5..5bef544 100644
--- a/src/runtime/runtime.h
+++ b/src/runtime/runtime.h
@@ -591,6 +591,11 @@ namespace internal {
   F(DisassembleFunction, 1, 1)                \
   F(TraceEnter, 0, 1)                         \
   F(TraceExit, 1, 1)                          \
+  F(TraceInvalidateStack, 1, 1)               \
+  F(TraceCallSite, -1 /* N */, 1)             \
+  F(TraceCallNewSite, -1 /* N */, 1)          \
+  F(TracePropertyLoad, 3, 1)                  \
+  F(TracePropertyStore, 4, 1)                 \
   F(HaveSameMap, 2, 1)                        \
   F(InNewSpace, 1, 1)                         \
   F(HasFastElements, 1, 1)                    \
diff --git a/src/v8.cc b/src/v8.cc
index 16107fd..d5ef7ee 100644
--- a/src/v8.cc
+++ b/src/v8.cc
@@ -75,6 +75,10 @@ void V8::InitializeOncePerProcessImpl() {
   SetUpJSCallerSavedCodeData();
   ExternalReference::SetUp();
   Bootstrapper::InitializeOncePerProcess();
+
+  // Visible V8 hacks: initialize per-thread storage for working buffers
+  extern void visv8_tls_init();
+  visv8_tls_init();
 }
 
 
