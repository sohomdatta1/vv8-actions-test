on:
    push:
      branches:
        - 'main'
    schedule:
      - cron: '0 0 * * *'
jobs:
    build_vv8:
        runs-on: self-hosted
        steps:
        - uses: actions/checkout@v2
        - name: Extract short SHA
          id: short_sha
          run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        - uses: actions/github-script@v6
          id: get_release
          with:
            script: |
              const release = await github.rest.repos.getLatestRelease({
                owner: 'wspr-ncsu',
                repo: 'visiblev8'
              });
              const tag = release.data.tag_name;
              const currentGitCommit = '${{ steps.short_sha.outputs.sha_short }}'
              const [_, commit, fullVersion, majorVersion] = tag.match(/visiblev8_([0-9a-f]+)-(([0-9]+)\.[0-9.]+)/);
              const chromeReleaseVersion = await (await fetch('https://omahaproxy.appspot.com/linux')).text();
              console.log(`tag: ${tag}`);
              console.log(`commit: ${commit}`);
              console.log(`fullVersion: ${fullVersion}`);
              console.log(`majorVersion: ${majorVersion}`);
              console.log(`currentGitCommit: ${currentGitCommit}`);
              console.log(`chromeReleaseVersion: ${chromeReleaseVersion}`);
              const shouldPublish = currentGitCommit !== commit || chromeReleaseVersion !== majorVersion;
              console.log(`shouldPublish: ${shouldPublish}`);
              core.setOutput('shouldPublish', shouldPublish);
              core.setOutput('tag', tag);
              core.setOutput('commit', commit);
              core.setOutput('fullVersion', fullVersion);
              core.setOutput('majorVersion', majorVersion);
              core.setOutput('chromeReleaseVersion', chromeReleaseVersion);
              core.setOutput('currentGitCommit', currentGitCommit);
        - name: Build VisibleV8
          if: ${{ steps.get_release.outputs.shouldPublish == 'true' }}
          env:
            VERSION: ${{ steps.get_release.outputs.fullVersion }}
          run: |
            cd builder && make build VERSION=$VERSION DEBUG=0 PUBLISH_ASSETS=0 TESTS=1 ANDROID=1
            - name: Remove artifacts
            if: success() || failure()
            uses: docker://ubuntu:latest
            with:
              entrypoint: /usr/bin/rm
              args: -rf .